{- ILC Standard Prelude -}
let map f lst =
  match lst with
  | [] => []
  | x:xs => (f x) : (map f xs)
in
let plus1 x = x + 1
in map plus1 [1, 2, 3]
  
{-  
  end
in 
let filter = lam f, lst .
  match lst with
  | [] => []
  | x::xs => if f x
                then x :: (filter f xs)
                else filter f xs
  end
in
let foldl = lam f, acc, lst .
  match lst with
  | [] => acc
  | x::xs => foldl f (f acc x) xs
  end
in
let foldl1 = lam f, lst .
  match lst with
  | [] => "error: empty list"
  | x::xs => foldl f x xs
  end
in
let scanl = lam f, s, lst .
  s :: match lst with
       | [] => []
       | x::xs => scanl f (f s x) xs
       end
in
let scanl1 = lam f, lst .
  match lst with
  | [] => []
  | x::xs => scanl f x xs
  end
in
let foldr = lam f, lst, acc .
  match lst with
  | [] => acc
  | x::xs => f x (foldr f xs acc)
  end
in
let foldr1 = lam f, lst .
  match lst with
  | [] => "error: empty list"
  | x::xs => foldr f xs s
  end
in
(* TODO: scanr, scanr1 *)
let all = lam f, lst .
  match lst with
  | [] => true
  | x :: xs => if f x then all f xs
               else false
  end
in
let any = lam f, lst .
  match lst with
  | [] => false
  | x :: xs => if f x then true
               else any f xs
  end
in
let and = lam lst .
  match lst with
  | [] => true
  | x::xs => if x then and xs
             else false
  end
in
let or = lam lst .
  match lst with
  | [] => false
  | x::xs => if x then true
          else or xs
  end
in
let nth = lam n, lst .
  match (n, lst) with
  | (_, []) => "not found" (* TODO: Error handling *)
  | (1, x::xs) => x
  | (n', x::xs) => nth (n'-1) xs
  end
in
let take = lam n, lst .
  match lst with
  | [] => "error"
  | x::xs => if n == 1 then [x]
             else x :: (take (n-1) xs)
  end
in
let drop = lam n, lst .
  match lst with
  | [] => []
  | x::xs => if n <= 0 then x::xs
             else drop (n-1) xs
  end
in
let splitAt = lam n, lst .
  (take n lst, drop n lst)
in
let takeWhile = lam f, lst .
  match lst with
  | [] => []
  | x::xs => if f x then x :: (takeWhile f xs)
             else takeWhile f xs
  end
in
let dropWhile = lam f, lst .
  match lst with
  | [] => []
  | x::xs => if f x then dropWhile f xs
             else x::xs
  end
in
let zip = lam lst1, lst2 .
  match (lst1, lst2) with
  | ([], _) => []
  | (_, []) => []
  | (x::xs, y::ys) => (x, y) :: (zip xs ys)
  end
in
let foldr = lam f, lst, acc .
  match lst with
  | [] => acc
  | x::xs => f x (foldr f xs acc)
  end
in
let null = lam lst .
  match lst with
  | [] => true
  | _ => false
  end
in
let sum = lam lst .
  match lst with
  | [] => 0
  | x::xs => x + sum xs
  end
in
let product = lam lst .
  match lst with
  | [] => 0
  | x::xs => x + product xs
  end
in
let min = lam x, y .
  if x < y then x else y
in
let max = lam x, y .
  if x > y then x else y
in
let minimum = lam lst .
  foldl1 min lst
in
let maximum = lam lst .
  foldl1 max lst
in
let init = lam lst .
  match lst with
  | [x] => []
  | x::xs => x :: (init xs)
  end
in
let replicate = lam n, x .
  match n with
  | 0 => []
  | n' => x :: replicate (n'-1) x
  end
in
let getBits = lam n .
  match n with
  | 0 => []
  | n => getBit () :: getBits (n-1)
  end
in
(* TODO: span, break *)
let insert = lam elem, lst .
  match lst with
  | [] => [elem]
  | x::xs => if elem < x then elem :: x :: xs
             else x :: (insert elem xs)
  end
in
let sort = lam lst .
  match lst with
  | [] => []
  | x::xs => insert x (sort xs)
  end
in ()-}