let testEnv = lam params .
  let N = params."N" in
  wr ("sid", {}) -> ?z2exec ;
  |> (let loop = lam n .
      match n with
      | 0 => ()
      | n => |> (wr (n, ()) -> ?z2p) ; loop (n-1)
      end
    in loop N)
in
let idealProtocol = lam pid, params .
  rd ?z2pp ;
  wr (pid, "hi " ++ show pid) -> ?p2f ;
  let msg = rd ?f2pp in
    print (show pid ++ " " ++ show msg)
in
let F_ACS = lam sid, crupt, params .
  let N = params."N" in
  let f = params."f" in
  let out = ref [] in
  nu c .
    |> (!(let inp = rd ?p2f in
        let out := inp :: @out ;
        if (length @out) >= (N-f) then wr 1 -> c)) ;
    |> (rd c ; 
        let bcast = lam n .
          match n with
          | 0 => ()
          | n => |> (wr (n, @out) -> ?f2p) ; bcast (n-1)
          end
        in bcast N)
in
let params = [("N", 4), ("f", 1)]
in
execUC testEnv idealProtocol F_ACS dummyAdversary params
