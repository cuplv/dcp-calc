(* Does not type check *)
let test = lam sid, N, f, D, F, P .
  |> (F sid N "") ;
  let mk_parties = lam n .
    match n with
    | 0 => ()
    (* Dealer *)
    | D => |> (P sid n) ; |> (wr ("hi", D) -> ?p2f) ; mk_parties (n-1)
    | n => |> (P sid n) ; mk_parties (n-1)
    end
  in mk_parties N
in
let F_SS = lam sid, N, input .
  let (msg, pid) = rd ?p2f in
    let bcast = lam n .
      match n with
      | 0 => ()
      (* Eventually send *)
      | n => |> (wr (msg, pid, n) -> ?f2p) ; bcast (n-1)
      end
    in bcast N
in
let Party = lam sid, pid .
  let msg = rd ?f2p in
    print (show pid ++ " " ++ show msg)
in
nu p2f, f2p .
  test "sid" 4 1 1 F_SS Party
