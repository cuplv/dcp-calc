let testEnv = lam params .
  let N = params."N" in
  let D = params."D" in
  wr ("sid", {}) -> ?z2exec ;
  |> (let loop = lam n .
      match n with
      | 0 => ()
      | n => |> (wr (n, ()) -> ?z2p) ; loop (n-1)
      end
    in loop N)
in
let idealProtocol = lam pid, params .
  let N = params."N" in
  let D = params."D" in
  rd ?z2pp ;
  wr (D, "hi") -> ?pp2f ;
  let msg = rd ?f2pp in
  print (show pid ++ " " ++ show msg)
in
let F_SS = lam sid, crupt, params .
  let N = params."N" in
  let (msg, pid) = rd ?p2f in
  let bcast = lam n .
    match n with
    | 0 => ()
    (* Eventually send *)
    | n => |> (wr (n, msg) -> ?f2p) ; bcast (n-1)
    end
  in bcast N
in
let params = [("N", 4), ("f", 1), ("D", 1)]
in
execUC testEnv idealProtocol F_SS dummyAdversary params
