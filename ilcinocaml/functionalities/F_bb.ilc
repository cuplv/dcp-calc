let F_bb = lam ?f2p, ?p2f .
  let (db, c) = ([], 0) in
    let (P_i, 'Write, m_i) = rd ?p2f in
    (* (P_i, 'Write, m_i :: BitString) *)
        let db = (c, (P_i, m_i)) :: db in
          wr ((S, 'Write, c, P_i, m_i), C_I) -> ?f2p .
            let c = c + 1 in
    let (P_j, 'Read, c) = rd ?p2f in
      if lookup (c, (P_i, m_i)) db then
        wr (((S, P_j, 'Read, m),
             (P_j, 'Read, c, P_j, m_i)), C_I) -> ?f2p
      else
        wr (((S, P_j, 'NoRead, c),
             (P_j, 'NoRead, c)), C_I) -> ?f2p
in
0