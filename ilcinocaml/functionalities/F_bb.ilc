let F_bb = lam x, ?f2p, ?p2f .
  let (db, c) = ([], 0) in
  letrec loop = 
    match rd ?p2f with
    | (P_i, 'Write, m_i) ->
      let db = (c, (P_i, m_i)) :: db in
      wr (("S", 'Write, c, P_i, m_i), "C_I") -> ?f2p .
      let c = c + 1 in 0
    | (P_j, 'Read, c) ->
      if mem c db then (* Clean this up *)
        let (P_i, m_i) = lookup c db in
        wr ((("S", P_j, 'Read, c, P_j, "m"),
	     (P_j, 'Read, c, P_i, m_i)), "C_I") -> ?f2p
      else
        wr ((("S", P_j, 'NoRead, c),
	     (P_j, 'NoRead, c)), "C_I") -> ?f2p
    end .
    loop in loop
in
nu f2p, p2f .
  let (?f2p, ?p2f) = (f2p, p2f) in
  F_bb 0 | wr (0, 'Write, "hi") -> p2f .
           let ((S, 'Write, c, P_i, m_i), C_I) = rd f2p in
	   wr (0, 'Read, c) -> p2f .
	   match rd f2p with
	   | ((_, (_, 'Read, _, _, _)), _) -> "Read"
	   | ((_, (_, 'NoRead, _)), _) -> "NoRead"
	   end
